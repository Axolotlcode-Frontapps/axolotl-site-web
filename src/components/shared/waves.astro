---
// waves.astro
---

<svg
  class="wave-top absolute"
  width="100%"
  height="100%"
  viewBox="0 0 800 1200"
>
  <circle
    cx="600"
    cy="400"
    r="100"
    fill="#b1e7e8"
    filter="blur(15px)"
    class="bounce-circle bounce-circle-1"></circle>
  <circle
    cx="600"
    cy="400"
    r="100"
    fill="#ffa7b7"
    filter="blur(15px)"
    class="bounce-circle bounce-circle-2"></circle>
  <circle
    cx="600"
    cy="400"
    r="100"
    fill="#b1e7e8"
    filter="blur(15px)"
    class="bounce-circle bounce-circle-3"></circle>
  <circle
    cx="600"
    cy="400"
    r="100"
    fill="#ffa7b7"
    filter="blur(15px)"
    class="bounce-circle bounce-circle-4"></circle>
  <circle
    cx="600"
    cy="400"
    r="100"
    fill="#fbc3d2"
    filter="blur(15px)"
    class="bounce-circle bounce-circle-5"></circle>
</svg>

<style>
  .wave-top {
    position: absolute;
    inset: 0;
    width: 100%;
    z-index: -10;
  }

  .bounce-circle {
    transform-origin: center;
    will-change: transform;
  }
</style>

<script>
  import { gsap } from 'gsap';

  function generateKeyframes(index: number) {
    const keyframes = `
      @keyframes bounce${index} {
        0% { transform: translate(0, 0) rotate(${Math.random() * 360}deg); }
        20% { transform: translate(${Math.random() * window.innerWidth}px, ${Math.random() * window.innerHeight}px) rotate(${Math.random() * 360}deg); }
        40% { transform: translate(${Math.random() * window.innerWidth}px, ${Math.random() * window.innerHeight}px) rotate(${Math.random() * 360}deg); }
        60% { transform: translate(${Math.random() * window.innerWidth}px, ${Math.random() * window.innerHeight}px) rotate(${Math.random() * 360}deg); }
        80% { transform: translate(${Math.random() * window.innerWidth}px, ${Math.random() * window.innerHeight}px) rotate(${Math.random() * 360}deg); }
        100% { transform: translate(0, 0) rotate(${Math.random() * 360}deg); }
      }
    `;
    return keyframes;
  }

  function createAnimationStyles() {
    const styleSheet = document.createElement('style');
    let styles = '';

    for (let i = 1; i <= 5; i++) {
      styles += generateKeyframes(i);
      styles += `
        .bounce-circle-${i} {
          animation: bounce${i} 15s ease-in-out infinite alternate;
        }
      `;
    }

    styleSheet.textContent = styles;
    document.head.appendChild(styleSheet);
  }

  document.addEventListener('DOMContentLoaded', createAnimationStyles);

  let resizeTimeout: number | undefined;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      const oldStyles = document.querySelectorAll('style');
      oldStyles.forEach((style) => {
        if (style.textContent?.includes('bounce')) {
          style.remove();
        }
      });

      createAnimationStyles();
    }, 250);
  });

  const wave1 =
    'M0 108.306L50 114.323C100 120.34 200 132.374 300 168.476C400 204.578 500 264.749 600 246.698C700 228.647 800 132.374 900 108.306C1000 84.2382 1100 132.374 1150 156.442L1200 180.51V0H1150C1100 0 1000 0 900 0C800 0 700 0 600 0C500 0 400 0 300 0C200 0 100 0 50 0H0V108.306Z';
  const wave2 =
    'M0 250L50 244.048C100 238.095 200 226.19 300 226.19C400 226.19 500 238.095 600 232.143C700 226.19 800 202.381 900 196.429C1000 190.476 1100 202.381 1150 208.333L1200 214.286V0H1150C1100 0 1000 0 900 0C800 0 700 0 600 0C500 0 400 0 300 0C200 0 100 0 50 0H0V250Z';
  const wave3 =
    'M0 250L50 238.095C100 226.19 200 202.381 300 166.667C400 130.952 500 83.3333 600 101.19C700 119.048 800 202.381 900 214.286C1000 226.19 1100 166.667 1150 136.905L1200 107.143V0H1150C1100 0 1000 0 900 0C800 0 700 0 600 0C500 0 400 0 300 0C200 0 100 0 50 0H0V250Z';
  const wave4 =
    'M0 125L50 111.111C100 97.2222 200 69.4444 300 97.2222C400 125 500 208.333 600 236.111C700 263.889 800 236.111 900 229.167C1000 222.222 1100 236.111 1150 243.056L1200 250V0H1150C1100 0 1000 0 900 0C800 0 700 0 600 0C500 0 400 0 300 0C200 0 100 0 50 0H0V125Z';

  const waveTl = gsap.timeline({
    repeat: -1,
    defaults: {
      duration: 2.5,
      ease: 'linear',
    },
  });

  waveTl
    .to('.wave-top > path', {
      attr: { d: wave2 },
      duration: 2.5,
    })
    .to('.wave-top > path', {
      attr: { d: wave3 },
      duration: 2.5,
    })
    .to('.wave-top > path', {
      attr: { d: wave4 },
      duration: 2.5,
    })
    .to('.wave-top > path', {
      attr: { d: wave1 },
      duration: 2.5,
    });
</script>
